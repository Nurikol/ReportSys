<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd">

    <!-- 加载配置文件 -->
	<context:property-placeholder location="classpath:db.properties"/>
	
	<!-- 数据库连接池 -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
          destroy-method="close">
        <property name="driverClassName" value="${jdbc.driver}" />
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
        <property name="maxActive" value="10" />
        <property name="maxIdle" value="5" />
    </bean>
    
    <!-- 配置sqlSessionFactory -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    	<!-- 装填数据源 -->
    	<property name="dataSource" ref="dataSource"></property>
   		 <!-- mybatis配置文件 -->
        <property name="configLocation" value="classpath:mybatis-sqlMapConfig.xml"/>
    </bean>
    
     <!-- mapper的扫描器，将包下边的mapper接口自动创建代理对象，自动创建到spring容器中，bean的id是mapper的类名（首字母小写）-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 配置扫描包的路径,要求mapper.xml和mapper.java同名且在同一个目录-->
        <property name="basePackage" value="com.report.mapper"/>
        <!-- 使用sqlSessionFactoryBeanName,如果只使用了一个数据源，可以省略该属性的配置，spring可以自动装配 -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>

    </bean>
</beans>
